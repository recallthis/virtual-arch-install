#!/bin/bash 
set -e

mydisk () {
  devicelist="$(lsblk -pdlno KNAME,SIZE /dev/sda[0-9] | awk '{if (NF>1) {print $0}}')"
  local device=$(dialog --stdout --menu "Select $1 disk" 0 0 0 ${devicelist} || exit 1)
  echo ${device}
}

iqubes () {
  mount /dev/mmcblk0p1 /mmc
  mkdir -p /boot/efi/EFI # /mmc /mnt/qubes
  find /mmc/qboot/boot/ -maxdepth 1 -type f -exec cp "{}" /boot/ ";"
  cp -r /mmc/qboot/boot/efi/EFI/qubes/ /boot/efi/EFI/
  cryptsetup luksOpen /dev/sda7 qubesluks
  mount /dev/mapper/qubesluks /mnt/qubes
  lsblk -n -o UUID /dev/sda1 >> /mnt/qubes/etc/fstab
  tree /boot
  lsblk -o NAME,UUID,PARTUUID /dev/sda{1,7,8}
  sed -n -i "\/boot\/efi/{s/\(UUID=\).*\(\/boot.*\)/\1$(lsblk -n -o UUID /dev/sda1)\t\2/};p" /mnt/qubes/etc/fstab
  grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi
}

itest () {
	arch-chroot -u user /mnt bash -s <<-EOF
		cd /home/user/.config
		echo blah
		pwd
	EOF
}
  	# [ "$(git --git-dir=/home/user/.dotfiles.git/ --work-tree=/home/user pull)" ] :q
		# dconf load /com/gexperts/Tilix/ < /home/user/.config/tilix/tilix.dconf
	 
idotfiles () {
  [ -f /mnt/home/user/.gitignore ] || echo ".dotfiles.git" >> /mnt/home/user/.gitignore
  [ -d /mnt/home/user/.dotfiles.git ] && rm -rf /mnt/home/user/.dotfiles.git
  [ "$(ls /mnt/home/user/.bash*)" ] && rm /mnt/home/user/.bash*
	arch-chroot /mnt pacman -Syu --noconfirm --needed git dconf
	arch-chroot -u user /mnt bash -s <<-EOF
	HOME=/home/user
  	git config --global user.email anotherforgithub@mail.com
  	git config --global user.name recallthis
  	git clone --bare https://www.github.com/recallthis/dotfiles.git /home/user/.dotfiles.git
  	git --git-dir=/home/user/.dotfiles.git/ --work-tree=/home/user checkout
  	git --git-dir=/home/user/.dotfiles.git/ --work-tree=/home/user config --local status.showUntrackedFiles no
  	git --git-dir=/home/user/.dotfiles.git/ --work-tree=/home/user config credential.helper store
	EOF
}

ipdftools () {
	[ -d /mnt/home/user/.cask ] && rm -rf /mnt/home/user/.cask
	[ -d /mnt/home/user/mine/src/pdf-tools ] && rm -rf /mnt/home/user/mine/src/pdf-tools
	arch-chroot /mnt pacman -Syu --noconfirm --needed emacs python poppler
	arch-chroot -u user /mnt bash -s <<-EOF
		HOME=/home/user
		export PATH=/home/user/.cask/bin:$PATH 
  	cd /home/user; curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python
  	git clone https://github.com/politza/pdf-tools.git /home/user/mine/src/pdf-tools
  	cd /home/user/mine/src/pdf-tools; make install-server-deps; make -s
	EOF
	[ -d /mnt/home/user/.emacs.d/elpa ] && arch-chroot /mnt chown -R user:user /home/user/.emacs.d/elpa
}

ilf () {
	arch-chroot /mnt pacman -Syu --noconfirm --needed go
	arch-chroot -u user /mnt bash -c "HOME=/home/user; go get -u github.com/gokcehan/lf"
	cp -f /mnt/home/user/go/bin/lf /mnt/usr/bin/
}

istack () {
	[ -d /mnt/home/user/mine/src/stack-static ] &&
		arch-chroot /mnt rm -rf /home/user/mine/src/stack-static
	arch-chroot -u user /mnt bash -s <<-EOF
		HOME=/home/user
  	git clone https://aur.archlinux.org/stack-static.git /home/user/mine/src/stack-static
	EOF
	arch-chroot -u user /mnt bash -c "HOME=/home/user; cd /home/user/mine/src/stack-static; makepkg --skippgpcheck -si"
	arch-chroot -u user /mnt bash -c "HOME=/home/user; cd /home/user/mine/src/stack-static; stack setup"
}

istackxmonad () { 
	[ -d /mnt/home/user/xmonad/xmonad-git ] && rm -rf /mnt/home/user/xmonad-git
	[ -d /mnt/home/user/xmonad/xmonad-contrib-git ] && rm -rf /mnt/home/user/xmonad-contrib-git
	[ -d /mnt/home/user/xmonad/xmobar-git ] && rm -rf /mnt/home/user/xmobar-git
	arch-chroot /mnt pacman -Syu --noconfirm --needed xorg-server xorg-xinit
	arch-chroot -u user /mnt bash -s <<-EOF
		HOME=/home/user
  	git clone "https://github.com/xmonad/xmonad" /home/user/.xmonad/xmonad-git
  	git clone "https://github.com/xmonad/xmonad-contrib" /home/user/.xmonad/xmonad-contrib-git
  	git clone "https://github.com/jaor/xmobar" /home/user/.xmonad/xmobar-git
  	cd /home/user/.xmonad; stack init && stack install
		xmonad --recompile
	EOF
}

ixmonad () {
	arch-chroot /mnt pacman -Syu --needed --noconfirm xmonad xmonad-contrib
	[ -f /mnt/home/user/.xmonad/build ] && mv /mnt/home/user/.xmonad/build /mnt/home/user/.xmonad/buildold
	arch-chroot -u user /mnt bash -s <<-EOF
		HOME=/home/user
		xmonad --recompile
	EOF
}

ikmonad () {
	[ -d /mnt/home/user/mine/src/kmonad ] && rm -rf /mnt/home/user/mine/src/kmonad
	arch-chroot -u user /mnt bash -s <<-EOF
		HOME=/home/user
  	git clone https://github.com/david-janssen/kmonad.git /home/user/mine/src/kmonad
	EOF
  arch-chroot -u user /mnt bash -c "HOME=/home/user; cd /home/user/mine/src/kmonad; stack install"
	arch-chroot /mnt bash -s <<-EOF
  	groupadd -f uinput
  	usermod -aG uinput user
  	usermod -aG input user
		# cp $(find /home/user/mine/src/kmonad -type f -iname kmonad | grep bin/kmonad) /usr/bin/
  	printf 'KERNEL=="uinput", MODE="0660", GROUP="uinput", OPTIONS+="static_node=uinput"' > /tmp/40-uinput.rules
  	printf 'KERNEL=="input", MODE="0660", GROUP="input", OPTIONS+="static_node=uinput"' > /tmp/40-input.rules
		cp -f /tmp/40-{ui,i}nput.rules /lib/udev/rules.d
	EOF
}

ask () {
    charcount='0'
    prompt="${1}: "
    reply=''
    while IFS='' read -n '1' -p "${prompt}" -r -s 'char'
    do
        case "${char}" in
            # Handles NULL
            ( $'\000' )
            break
            ;;
            # Handles BACKSPACE and DELETE
            ( $'\010' | $'\177' )
            if (( charcount > 0 )); then
                prompt=$'\b \b'
                reply="${reply%?}"
                (( charcount-- ))
            else
                prompt=''
            fi
            ;;
            ( * )
            prompt='*'
            reply+="${char}"
            (( charcount++ ))
            ;;
        esac
    done
    printf '\n' >&2
    printf '%s\n' "${reply}"
}

iarch () {

	setvtrgb /data/dialogcolors
	myswap="$(mydisk swap)"
	setvtrgb /data/ttycolors; clear
	[ "$(lsblk | grep /mnt/boot/efi$)" ] && umount /mnt/boot/efi
	[ "$(lsblk | grep /mnt$)" ] && umount /mnt
	[ "$(lsblk | grep "\[SWAP\]$")" ] && swapoff $myswap

	printf "\nFormat ${myroot} as root, ${myswap} as swap (and /dev/sda1 as boot) .\n"
	printf "\nType yes to format, no to resume installation, or exit to leave. yes/no/exit: "
	read choice

	if [ "$choice" == "yes" ]; then
  	mkfs.ext4 -F $myroot
  	mkfs.fat -F32 /dev/sda1
	elif [ "$choice" == "exit" ]; then
		exit 0
	fi

  mkswap $myswap
  swapon $myswap
	mount $myroot /mnt
  mkdir -p /mnt/boot/efi/EFI
  mount /dev/sda1 /mnt/boot/efi

	pwstatus="$(arch-chroot /mnt passwd --status root | sed 's/^[A-z]* \([A-z]*\) .*/\1/g')"
	if [[ "$pwstatus" == "P" ]]; then
		read -p "Re-enter password? y/n: " reenter 
		if [[ "$reenter" == "y" ]]; then
 			mypwd="$(ask Password)"
		fi
	else
 			mypwd="$(ask Password)"
	fi
        reflector --country "United Kingdom" --age 12 --protocol https --sort rate > /etc/pacman.d/mirrorlist
 	sed -i '/#\[multilib]/!b;n;cInclude = /\etc/\pacman.d/\mirrorlist' /etc/pacman.conf
  pacman -Sy
  pacstrap /mnt base base-devel linux linux-firmware sudo nano
  genfstab -U -p /mnt > /mnt/etc/fstab
	mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d
	cat <<-EOF > /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin user --noclear %I $TERM
	EOF

	arch-chroot /mnt bash -s <<-EOF
  	ln -v -sf /usr/share/zoneinfo/Europe/London /etc/localtime
  	hwclock --systohc --utc
  	sed -i 's/#en_GB.UTF-8/en_GB.UTF-8/' /etc/locale.gen
  	localectl set-locale LANG=en_GB.UTF-8
		export LANG=en_GB.UTF-8
  	locale-gen
  	echo "arch" > /etc/hostname
 		echo -e "127.0.0.1\tlocalhost\n::1\t\tlocalhost\n127.0.1.1\tarch.localdomain  arch" > /etc/hosts
  	useradd -m user
  	pacman -Syu --needed --noconfirm git netctl wpa_supplicant dialog grub efibootmgr dosfstools os-prober mtools refind-efi
  	usermod -aG wheel,audio,video,optical,storage user
  	sed -i 's/# %wheel ALL=(ALL) ALL/ %wheel ALL=(ALL) ALL/' /etc/sudoers
	EOF

	# arch-chroot /mnt echo -en "${mypwd}\n${mypwd}" | passwd > /dev/null 2> /dev/null
	# arch-chroot /mnt echo -en "$mypwd\n$mypwd" | passwd user > /dev/null 2> /dev/null

	if [ -n "${mypwd:-}" ]; then
		arch-chroot /mnt bash -s <<-EOF
			echo "root:${mypwd}" | chpasswd
			echo "user:${mypwd}" | chpasswd user
		EOF
	fi

  if [ "$1" == "qubes" ]; then
    iqubes
  elif [ "$1" == "mbr" ]; then
  	arch-chroot /mnt grub-install /dev/sda
  	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
  fi

  arch-chroot /mnt grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi
  arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
}

ipackages () {
  arch-chroot /mnt pacman -Syu --needed netctl dialog dmenu emacs feh emacs \
  perl vim qutebrowser gvfs-mtp light links mplayer mpv mtools wpa_supplicant  \
  git poppler poppler-glib parcellite python-pip qtox tilix fzf rofi python \
  zsh rxvt-unicode tree w3m xfce4-terminal xorg-xbacklight dhcpcd libnotify \
  xorg-xev xorg-server youtube-dl imagemagick dunst firefox
}

### pacman -S --noconfirm gnome-shell gdm gnome-terminal gnome-control-center gnome-tweak-tool gnome-backgrounds network-manager wpa_supplicant wireless_tools modemmanager mobile-broadband-provider-info nm-connection-editor network-manager-applet firefox thunar thunderbird
    
ignome () {
	arch-chroot /mnt pacman -Syu --needed gnome-control-center gnome-tweak-tool gnome-backgrounds \
  gdm gedit gnome-backgrounds gnome-control-center \
  gnome-system-monitor gnome-terminal gnome-tweaks dconf-editor \
  nautilus-terminal chrome-gnome-shell
}

# if [ ! "$(netctl list | sed -n '/^\*.*/p')" ]; then
# 	read -p "not connected. q(uit)/w(ifi-menu):" answifi 
# 	if [[ "$answifi" == "w" ]]; then
# 		wifi-menu
# 		[ $? -ne 0 ] && {
# 			setvtrgb /data/ttycolors
# 			exit
# 		}
# 	else
# 		setvtrgb /data/ttycolors ; exit 0
# 	fi
# fi

use=( iarch ipackages ignome idotfiles itest ilf ipdftools istack ixmonad ikmonad )

setvtrgb /data/dialogcolors
menu=( `echo $(dialog --no-items --stdout --checklist sometext 0 0 0 ${use[@]/%/ x} || exit)` )
myroot=$(mydisk root)
[ "$(lsblk | grep /mnt$)" ] || mount $myroot /mnt
setvtrgb /data/ttycolors; clear

for i in "${menu[@]}"; do
 	$i
done

[ "$(lsblk | grep /mnt/boot/efi$)" ] && umount /mnt/boot/efi
[ "$(lsblk | grep "\[SWAP\]$")" ] && swapoff $myswap
