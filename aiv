#!/bin/bash

getdisk () {
    IFS=$'\n'
    devicelist="$(lsblk -pdlno KNAME,SIZE /dev/sda[0-9] | awk '{if (NF>1) {print " "NR "\t" $0}}')"
    devicearray=( $(echo "$devicelist") )
    devicetotal="$(echo "$devicelist" | wc -l)"
    echo "$devicelist"
    read -p "Choose a root device number from 1-$devicetotal  " rootchoice
    read -p "Choose a swap device number from 1-$devicetotal  " swapchoice
    if [[ "$rootchoice" -gt 0 ]] && [[ "$rootchoice" -le "$devicetotal" ]]; then
        let "rootchoice--"
        myroot=$(printf "${devicearray[$rootchoice]}" | awk '{print $2}')
        if [[ "$swapchoice" -gt 0 ]] && [[ "$swapchoice" -le "$devicetotal" ]]; then
            let "swapchoice--"
            myswap=$(printf "${devicearray[$swapchoice]}" | awk '{print $2}')
        else
            echo "invalid device number for swap"
            exit 0
        fi
    else
        echo "invalid device number for root"
        exit 0
    fi
}

preparechroot() {
    mount -t proc /proc /mnt/proc
    mount --rbind /sys /mnt/sys/
    mount --rbind /dev /mnt/dev/
    #mount --rbind /sys/firmware/efi/efivars sys/firmware/efi/efivars/
    cp /etc/resolv.conf /mnt/etc/resolv.conf
}

archchroot() {
    chroot /mnt /bin/bash
}

iarch() { 
    getdisk
    [ "$(lsblk | grep /mnt$)" ] && umount /mnt
    [ "$(lsblk | grep "\[SWAP\]$")" ] && swapoff $myswap
    printf "\nFormat ${myroot} as root \
            ${myswap} as swap (and /dev/sda1 as boot) .\n \
            \nType yes to format, no to resume installation, \
             or exit to leave. yes/no/exit: "
    read formatchoice
    if [ "$formatchoice" == "yes" ]; then
        mkfs.ext4 -F $myroot
    elif [ "$formatchoice" == "exit" ]; then
        exit 0
    fi
    timedatectl set-ntp true
    mount $myroot /mnt
    mkswap $myswap
    swapon $myswap
    pacman -Sy
    pacstrap /mnt base base-devel linux linux-firmware sudo nano
    sed -i '/#\[multilib]/!b;n;s/^#//g' /mnt/etc/pacman.conf
    genfstab -U -p /mnt > /mnt/etc/fstab
    mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d
    echo -e "#[Service]"\
            "\n#Execstart"\
            "\n#ExecStart=-/usr/bin/agetty "\
            "--autologin user --noclear %I $TERM"\
            > /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
    preparechroot
    }

iarchroot() { 
    ln -v -sf /usr/share/zoneinfo/Europe/London /etc/localtime
    # hwclock --systohc --utc
    # sed -i 's/#en_GB.UTF-8/en_GB.UTF-8/' /etc/locale.gen
    # localectl set-locale LANG=en_GB.UTF-8
    # export LANG=en_GB.UTF-8
    # locale-gen
    # echo "arch" > /etc/hostname
    # echo -e "127.0.0.1\tlocalhost"\
        #         "\n::1\t\tlocalhost"\
        #         "\n127.0.1.1\tarch.localdomain  arch"\
        #         > /etc/hosts
    # useradd -m user
    # pacman -Syu --needed --noconfirm git netctl wpa_supplicant \
        #        dialog grub efibootmgr dosfstools os-prober mtools refind-efi
    # usermod -aG wheel,audio,video,optical,storage user
    # sed -i 's/# %wheel ALL=(ALL) ALL/ %wheel ALL=(ALL) ALL/' /etc/sudoers
}

getSources() {
    reflector --country "United Kingdom" \
              --age 12 \
              --protocol https \
              --sort rate \
              > /etc/pacman.d/mirrorlist
}

conditions() {
    if [[ "$1" == "sources" ]]; then
        getSources
        exit 0
    elif [[ "$1" == "test" ]]; then
        mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d
        echo -e "#[Service]"\
             "\n#Execstart"\
             "\n#ExecStart=-/usr/bin/agetty "\
             "--autologin user --noclear %I $TERM"\
             > /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
        exit 0
    elif [ ! "$1" ]; then
        printf "getting sources...\n\n"
        getSources
        iarch
    fi

    # finish and umount stuff
    [ "$(lsblk | grep "\[SWAP\]$")" ] && swapoff $myswap
}

conditions
